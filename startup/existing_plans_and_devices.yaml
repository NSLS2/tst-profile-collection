# This file is automatically generated. Edit at your own risk.
existing_devices:
  default_flyer:
    classname: StandardFlyer
    is_flyable: true
    is_movable: false
    is_readable: false
    module: ophyd_async.core._flyer
  manta1:
    classname: VimbaDetector
    is_flyable: true
    is_movable: false
    is_readable: true
    module: ophyd_async.epics.advimba._vimba
  manta2:
    classname: VimbaDetector
    is_flyable: true
    is_movable: false
    is_readable: true
    module: ophyd_async.epics.advimba._vimba
  manta_flyer:
    classname: StandardFlyer
    is_flyable: true
    is_movable: false
    is_readable: false
    module: ophyd_async.core._flyer
  panda1:
    classname: HDFPanda
    is_flyable: true
    is_movable: false
    is_readable: true
    module: ophyd_async.fastcs.panda._hdf_panda
  panda_flyer:
    classname: StandardFlyer
    is_flyable: true
    is_movable: false
    is_readable: false
    module: ophyd_async.core._flyer
  rot_motor:
    classname: Motor
    is_flyable: true
    is_movable: true
    is_readable: true
    module: ophyd_async.epics.motor
existing_plans:
  _manta_collect_dark_flat:
    module: __main__
    name: _manta_collect_dark_flat
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: manta_detector
    - default: '10'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: '0.1'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure_time
    properties:
      is_generator: true
  abs_set:
    description: Set a value. Optionally, wait for it to complete before continuing.
    module: bluesky.plan_stubs
    name: abs_set
    parameters:
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - description: passed to obj.set()
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  adaptive_scan:
    description: Scan over one variable with adaptively tuned step size.
    module: bluesky.plans
    name: adaptive_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: str
      description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: float
      description: smallest step for fast-changing regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - annotation:
        type: float
      description: largest step for slow-chaning regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: max_step
    - annotation:
        type: float
      description: desired fractional change in detector signal between steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_delta
    - annotation:
        type: bool
      description: whether backward steps are allowed -- this is concern with some
        motors
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: backstep
    - annotation:
        type: typing.Optional[float]
      default: '0.8'
      description: threshold for going backward and rescanning a region, default is
        0.8
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: threshold
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  broadcast_msg:
    description: Generate many copies of a message, applying it to a list of devices.
    module: bluesky.plan_stubs
    name: broadcast_msg
    parameters:
    - annotation:
        type: str
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: command
    - annotation:
        type: collections.abc.Iterable[typing.Any]
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: objs
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  caching_repeater:
    description: Generate n chained copies of the messages in a plan.
    module: bluesky.plan_stubs
    name: caching_repeater
    parameters:
    - annotation:
        type: typing.Optional[int]
      description: total number of repetitions; if None, infinite
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    properties:
      is_generator: false
  checkpoint:
    description: If interrupted, rewind to this point.
    module: bluesky.plan_stubs
    name: checkpoint
    parameters: []
    properties:
      is_generator: false
  clear_checkpoint:
    description: Designate that it is not safe to resume. If interrupted or paused,
      abort.
    module: bluesky.plan_stubs
    name: clear_checkpoint
    parameters: []
    properties:
      is_generator: false
  close_run:
    description: Mark the end of the current 'run'. Emit a RunStop document.
    module: bluesky.plan_stubs
    name: close_run
    parameters:
    - annotation:
        type: typing.Optional[str]
      default: None
      description: The exit status to report in the Stop document
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exit_status
    - annotation:
        type: typing.Optional[str]
      default: None
      description: Long-form description of why the run ended
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: reason
    properties:
      is_generator: false
  collect:
    description: Collect data cached by one or more fly-scanning devices and emit
      documents.
    module: bluesky.plan_stubs
    name: collect
    parameters:
    - annotation:
        type: __FLYABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: bool
      default: 'False'
      description: 'If False (default), emit Event documents in one bulk dump. If
        True,

        emit events one at time.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: stream
    - annotation:
        type: bool
      default: 'True'
      description: 'If True (default), return the collected Events. If False, return
        None.

        Using ``stream=True`` and ``return_payload=False`` together avoids

        accumulating the documents in memory: they are emitted as they are

        collected, and they are not accumulated.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: return_payload
    - annotation:
        type: typing.Optional[str]
      default: None
      description: 'If not None, will collect for the named string specifically, else
        collect will be performed

        on all streams.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: name
    properties:
      is_generator: false
  collect_while_completing:
    description: 'Collect data from one or more fly-scanning devices and emit documents,
      then collect and emit

      data from one or more Collectable detectors until all are done.'
    module: bluesky.plan_stubs
    name: collect_while_completing
    parameters:
    - description: '''collect'' methods.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: flyers
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dets
    - default: None
      description: 'Time period in seconds between each yield from collect while waiting
        for triggered

        objects to be done'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: flush_period
    - default: None
      description: 'If not None, will collect for the named string specifically, else
        collect will be performed

        on all streams.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stream_name
    properties:
      is_generator: false
  complete:
    description: Tell a flyable, 'stop collecting, whenever you are ready'.
    module: bluesky.plan_stubs
    name: complete
    parameters:
    - annotation:
        type: __FLYABLE__
      convert_device_names: true
      description: Device with 'kickoff' and 'complete' methods.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to ``obj.complete()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  complete_all:
    description: Tell one or more flyable objects, 'stop collecting, whenever you
      are ready'.
    module: bluesky.plan_stubs
    name: complete_all
    parameters:
    - description: Device with 'kickoff' and 'complete' methods.
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to 'complete' for each device
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  configure:
    description: Change Device configuration and emit an updated Event Descriptor
      document.
    module: bluesky.plan_stubs
    name: configure
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - description: passed through to ``obj.configure()``
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - description: passed through to ``obj.configure()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  count:
    description: Take one or more readings from detectors.
    module: bluesky.plans
    name: count
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Optional[int]
      default: '1'
      description: 'number of readings to take; default is 1


        If None, capture data until canceled'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - annotation:
        type: typing.Union[float, collections.abc.Iterable[float]]
      default: '0.0'
      description: Time delay in seconds between successive readings; default is 0.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    - default: None
      description: "hook for customizing action of inner loop (messages per step)\n\
        Expected signature ::\n\n   def f(detectors: Iterable[OphydObj]) -> Generator[Msg]:\n\
        \       ..."
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_shot
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  create:
    description: Bundle future readings into a new Event document.
    module: bluesky.plan_stubs
    name: create
    parameters:
    - annotation:
        type: str
      default: '''primary'''
      description: 'name given to event stream, used for convenient identification

        default is ''primary'''
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: name
    properties:
      is_generator: false
  declare_stream:
    description: Bundle future readings into a new Event document.
    module: bluesky.plan_stubs
    name: declare_stream
    parameters:
    - annotation:
        type: __READABLE__
      convert_device_names: true
      description: objects whose readings will be present in the stream
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: objs
    - annotation:
        type: str
      description: 'name given to event stream, used for convenient identification

        default is ''primary'''
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: name
    - annotation:
        type: bool
      default: 'False'
      description: 'collect as well as describe when declaring the stream

        default is `False`'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: collect
    properties:
      is_generator: false
  deferred_pause:
    description: Pause at the next checkpoint.
    module: bluesky.plan_stubs
    name: deferred_pause
    parameters: []
    properties:
      is_generator: false
  drop:
    description: Drop a bundle of readings without emitting a completed Event document.
    module: bluesky.plan_stubs
    name: drop
    parameters: []
    properties:
      is_generator: false
  fly:
    description: Perform a fly scan with one or more 'flyers'.
    module: bluesky.plans
    name: fly
    parameters:
    - annotation:
        type: list[__FLYABLE__]
      convert_device_names: true
      description: objects that support the flyer interface
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: flyers
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  grid_scan:
    description: Scan over a mesh; each motor is on an independent trajectory.
    module: bluesky.plans
    name: grid_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Union[collections.abc.Iterable, bool, NoneType]
      default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  inner_manta_collect:
    module: __main__
    name: inner_manta_collect
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: manta_detector
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: flyer
    properties:
      is_generator: true
  inner_product_scan:
    module: bluesky.plans
    name: inner_product_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  input_plan:
    description: Prompt the user for text input.
    module: bluesky.plan_stubs
    name: input_plan
    parameters:
    - annotation:
        type: str
      default: ''''''
      description: prompt string, e.g., 'enter user name' or 'enter next position'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: prompt
    properties:
      is_generator: false
  install_suspender:
    description: Install a suspender during a plan.
    module: bluesky.plan_stubs
    name: install_suspender
    parameters:
    - description: The suspender to install
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: suspender
    properties:
      is_generator: false
  kickoff:
    description: Kickoff one fly-scanning device.
    module: bluesky.plan_stubs
    name: kickoff
    parameters:
    - annotation:
        type: __FLYABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to ``obj.kickoff()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  kickoff_all:
    description: Kickoff one or more fly-scanning devices.
    module: bluesky.plan_stubs
    name: kickoff_all
    parameters:
    - description: Device with 'kickoff', and 'complete' methods.
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'True'
      description: 'If True, wait for completion before processing any more messages.

        True by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to 'kickoff' for each device
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  list_grid_scan:
    description: Scan over a mesh; each motor is on an independent trajectory.
    module: bluesky.plans
    name: list_grid_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "patterned like (``motor1, position_list1,``\n                ``motor2,\
        \ position_list2,``\n                ``motor3, position_list3,``\n       \
        \         ``...,``\n                ``motorN, position_listN``)\n\nThe first\
        \ motor is the \"slowest\", the outer loop. ``position_list``'s\nare lists\
        \ of positions, all lists must have the same length. Motors\ncan be any 'settable'\
        \ object (motor, temp controller, etc.)."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: bool
      default: 'False'
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory.The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  list_scan:
    description: Scan over one or more variables in steps simultaneously (inner product).
    module: bluesky.plans
    name: list_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: tuple[typing.Union[__MOVABLE__, typing.Any], list[typing.Any]]
      convert_device_names: true
      description: "For one dimension, ``motor, [point1, point2, ....]``.\nIn general:\n\
        \n.. code-block:: python\n\n    motor1, [point1, point2, ...],\n    motor2,\
        \ [point1, point2, ...],\n    ...,\n    motorN, [point1, point2, ...]\n\n\
        Motors can be any 'settable' object (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature:

        ``f(detectors, motor, step) -> plan (a generator)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  locate:
    description: Locate some Movables and return their locations.
    module: bluesky.plan_stubs
    name: locate
    parameters:
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: objs
    - default: 'True'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: squeeze
    properties:
      is_generator: false
  log_scan:
    description: Scan over one variable in log-spaced steps.
    module: bluesky.plans
    name: log_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: int
      description: number of steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  manta_collect:
    module: __main__
    name: manta_collect
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: manta_detector
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: flyer
    - default: '10'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: '0.1'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure_time
    - default: 'True'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: software_trigger
    properties:
      is_generator: true
  manta_fly:
    module: __main__
    name: manta_fly
    parameters:
    - default: '10'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    properties:
      is_generator: true
  monitor:
    description: Asynchronously monitor for new values and emit Event documents.
    module: bluesky.plan_stubs
    name: monitor
    parameters:
    - annotation:
        type: __READABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Optional[str]
      default: None
      description: name of event stream; default is None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: name
    - description: passed through to ``obj.subscribe()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  mov:
    description: Move one or more devices to a setpoint. Wait for all to complete.
    module: bluesky.plan_stubs
    name: mv
    parameters:
    - annotation:
        type: tuple[typing.Union[__MOVABLE__, bluesky.protocols.NamedMovable, typing.Any],
          ...]
      convert_device_names: true
      description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  move_per_step:
    description: Inner loop of an N-dimensional step scan without any readings
    module: bluesky.plan_stubs
    name: move_per_step
    parameters:
    - annotation:
        type: collections.abc.Mapping[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: mapping motors to positions in this step
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    - annotation:
        type: dict[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: mapping motors to their last-set positions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: pos_cache
    properties:
      is_generator: false
  movr:
    description: Move one or more devices to a relative setpoint. Wait for all to
      complete.
    module: bluesky.plan_stubs
    name: mvr
    parameters:
    - annotation:
        type: tuple[typing.Union[__MOVABLE__, bluesky.protocols.NamedMovable, typing.Any],
          ...]
      convert_device_names: true
      description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  mv:
    description: Move one or more devices to a setpoint. Wait for all to complete.
    module: bluesky.plan_stubs
    name: mv
    parameters:
    - annotation:
        type: tuple[typing.Union[__MOVABLE__, bluesky.protocols.NamedMovable, typing.Any],
          ...]
      convert_device_names: true
      description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  mvr:
    description: Move one or more devices to a relative setpoint. Wait for all to
      complete.
    module: bluesky.plan_stubs
    name: mvr
    parameters:
    - annotation:
        type: tuple[typing.Union[__MOVABLE__, bluesky.protocols.NamedMovable, typing.Any],
          ...]
      convert_device_names: true
      description: device1, value1, device2, value2, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: Used to mark these as a unit to be waited on.
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  'null':
    description: Yield a no-op Message. (Primarily for debugging and testing.)
    module: bluesky.plan_stubs
    name: 'null'
    parameters: []
    properties:
      is_generator: false
  one_1d_step:
    description: Inner loop of a 1D step scan
    module: bluesky.plan_stubs
    name: one_1d_step
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: devices to read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: The motor to move
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: typing.Any
      description: Where to move the motor to
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    - annotation:
        type: typing.Optional[__CALLABLE__]
      default: None
      description: "function to do the actual acquisition ::\n\n   def take_reading(dets,\
        \ name='primary'):\n        yield from ...\n\nCallable[List[OphydObj], Optional[str]]\
        \ -> Generator[Msg], optional\n\nDefaults to `trigger_and_read`"
      eval_expressions: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: take_reading
    properties:
      is_generator: false
  one_nd_step:
    description: Inner loop of an N-dimensional step scan
    module: bluesky.plan_stubs
    name: one_nd_step
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: devices to read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: collections.abc.Mapping[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: mapping motors to positions in this step
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    - annotation:
        type: dict[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: mapping motors to their last-set positions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: pos_cache
    - annotation:
        type: typing.Optional[__CALLABLE__]
      default: None
      description: "function to do the actual acquisition ::\n\n   def take_reading(dets,\
        \ name='primary'):\n        yield from ...\n\nCallable[List[OphydObj], Optional[str]]\
        \ -> Generator[Msg], optional\n\nDefaults to `trigger_and_read`"
      eval_expressions: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: take_reading
    properties:
      is_generator: false
  one_shot:
    description: Inner loop of a count.
    module: bluesky.plan_stubs
    name: one_shot
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: devices to read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Optional[__CALLABLE__]
      default: None
      description: "function to do the actual acquisition ::\n\n   def take_reading(dets,\
        \ name='primary'):\n        yield from ...\n\nCallable[List[OphydObj], Optional[str]]\
        \ -> Generator[Msg], optional\n\nDefaults to `trigger_and_read`"
      eval_expressions: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: take_reading
    properties:
      is_generator: false
  open_run:
    description: Mark the beginning of a new 'run'. Emit a RunStart document.
    module: bluesky.plan_stubs
    name: open_run
    parameters:
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    properties:
      is_generator: false
  outer_product_scan:
    description: Scan over a mesh; each motor is on an independent trajectory.
    module: bluesky.plans
    name: grid_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Union[collections.abc.Iterable, bool, NoneType]
      default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  panda_fly:
    module: __main__
    name: panda_fly
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: panda
    - default: '724'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    properties:
      is_generator: true
  pause:
    description: Pause and wait for the user to resume.
    module: bluesky.plan_stubs
    name: pause
    parameters: []
    properties:
      is_generator: false
  prepare:
    description: Prepare a device.
    module: bluesky.plan_stubs
    name: prepare
    parameters:
    - description: Device with 'prepare' method
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed through to ``obj.prepare()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  print_summary_wrapper:
    description: Print summary of plan as it goes by
    module: bluesky.preprocessors
    name: print_summary_wrapper
    parameters:
    - description: Must yield `Msg` objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    properties:
      is_generator: true
  ramp_plan:
    description: Take data while ramping one or more positioners.
    module: bluesky.plans
    name: ramp_plan
    parameters:
    - description: 'plan to start the ramp.  This will be run inside of a open/close

        run.


        This plan must return a `ophyd.StatusBase` object.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: go_plan
    - annotation:
        type: __READABLE__
      convert_device_names: true
      description: signal to be monitored
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: monitor_sig
    - description: 'generator which takes no input


        This will be called for every data point.  This should create

        one or more events.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: inner_plan_func
    - annotation:
        type: bool
      default: 'True'
      description: If True, add a pre data at beginning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: take_pre_data
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'If not None, the maximum time the ramp can run.


        In seconds'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: timeout
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'If not None, take data no faster than this.  If None, take

        data as fast as possible


        If running the inner plan takes longer than `period` than take

        data with no dead time.


        In seconds.'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: period
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: md
    properties:
      is_generator: true
  rbuf_plan:
    description: Use with acq_for_ring_buffer4.
    module: __main__
    name: rbuf_plan
    parameters:
    - default: 2e-05
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: t_period
    - default: '25000'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n_total
    - default: '10000'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n_after
    properties:
      is_generator: true
  rd:
    description: Reads a single-value non-triggered object
    module: bluesky.plan_stubs
    name: rd
    parameters:
    - annotation:
        type: __READABLE__
      convert_device_names: true
      description: The device to be read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Any
      default: '0'
      description: "The value to return when not running in a \"live\" RunEngine.\n\
        This come ups when ::\n\n   ret = yield Msg('read', obj)\n   assert ret is\
        \ None\n\nthe plan is passed to `list` or some other iterator that\nrepeatedly\
        \ sends `None` into the plan to advance the\ngenerator."
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: default_value
    properties:
      is_generator: false
  read:
    description: Take a reading and add it to the current bundle of readings.
    module: bluesky.plan_stubs
    name: read
    parameters:
    - annotation:
        type: __READABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: false
  rel_adaptive_scan:
    description: Relative scan over one variable with adaptively tuned step size.
    module: bluesky.plans
    name: rel_adaptive_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: str
      description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: float
      description: smallest step for fast-changing regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - annotation:
        type: float
      description: largest step for slow-chaning regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: max_step
    - annotation:
        type: float
      description: desired fractional change in detector signal between steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_delta
    - annotation:
        type: bool
      description: whether backward steps are allowed -- this is concern with some
        motors
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: backstep
    - annotation:
        type: typing.Optional[float]
      default: '0.8'
      description: threshold for going backward and rescanning a region, default is
        0.8
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: threshold
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_grid_scan:
    description: Scan over a mesh relative to current position.
    module: bluesky.plans
    name: rel_grid_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Union[collections.abc.Iterable, bool, NoneType]
      default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_list_grid_scan:
    description: 'Scan over a mesh; each motor is on an independent trajectory. Each
      point is

      relative to the current position.'
    module: bluesky.plans
    name: rel_list_grid_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "patterned like (``motor1, position_list1,``\n                ``motor2,\
        \ position_list2,``\n                ``motor3, position_list3,``\n       \
        \         ``...,``\n                ``motorN, position_listN``)\n\nThe first\
        \ motor is the \"slowest\", the outer loop. ``position_list``'s\nare lists\
        \ of positions, all lists must have the same length. Motors\ncan be any 'settable'\
        \ object (motor, temp controller, etc.)."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: bool
      default: 'False'
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory.The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_list_scan:
    description: Scan over one variable in steps relative to current position.
    module: bluesky.plans
    name: rel_list_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "For one dimension, ``motor, [point1, point2, ....]``.\nIn general:\n\
        \n.. code-block:: python\n\n    motor1, [point1, point2, ...],\n    motor2,\
        \ [point1, point2, ...],\n    ...,\n    motorN, [point1, point2, ...]\n\n\
        Motors can be any 'settable' object (motor, temp controller, etc.)\npoint1,\
        \ point2 etc are relative to the current location."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_log_scan:
    description: Scan over one variable in log-spaced steps relative to current position.
    module: bluesky.plans
    name: rel_log_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: int
      description: number of steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_scan:
    description: Scan over one multi-motor trajectory relative to current position.
    module: bluesky.plans
    name: rel_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "For one dimension, ``motor, start, stop``.\nIn general:\n\n..\
        \ code-block:: python\n\n    motor1, start1, stop1,\n    motor2, start2, start2,\n\
        \    ...,\n    motorN, startN, stopN,\n\nMotors can be any 'settable' object\
        \ (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: number of points
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_set:
    description: Set a value relative to current value. Optionally, wait before continuing.
    module: bluesky.plan_stubs
    name: rel_set
    parameters:
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - description: passed to obj.set()
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    - description: passed to obj.set()
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  rel_spiral:
    description: Relative spiral scan
    module: bluesky.plans
    name: rel_spiral
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: Delta radius along the minor axis of the ellipse.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - annotation:
        type: float
      description: Number of theta steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nth
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'Delta radius along the major axis of the ellipse. If None, it

        defaults to dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - annotation:
        type: float
      default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_spiral_fermat:
    description: Relative fermat spiral scan
    module: bluesky.plans
    name: rel_spiral_fermat
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: delta radius
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - annotation:
        type: float
      description: radius gets divided by this
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: factor
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'Delta radius along the major axis of the ellipse, if not specifed

        defaults to dr'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - annotation:
        type: typing.Optional[float]
      default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  rel_spiral_square:
    description: Relative square spiral scan, centered around current (x, y) position.
    module: bluesky.plans
    name: rel_spiral_square
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: number of x axis points
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_num
    - annotation:
        type: float
      description: Number of y axis points.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_num
    - default: None
      description: 'hook for cutomizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plans.one_nd_step` (the default) for

        details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_adaptive_scan:
    description: Relative scan over one variable with adaptively tuned step size.
    module: bluesky.plans
    name: rel_adaptive_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: str
      description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: float
      description: smallest step for fast-changing regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - annotation:
        type: float
      description: largest step for slow-chaning regions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: max_step
    - annotation:
        type: float
      description: desired fractional change in detector signal between steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_delta
    - annotation:
        type: bool
      description: whether backward steps are allowed -- this is concern with some
        motors
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: backstep
    - annotation:
        type: typing.Optional[float]
      default: '0.8'
      description: threshold for going backward and rescanning a region, default is
        0.8
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: threshold
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_inner_product_scan:
    module: bluesky.plans
    name: relative_inner_product_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: int
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_list_scan:
    description: Scan over one variable in steps relative to current position.
    module: bluesky.plans
    name: rel_list_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "For one dimension, ``motor, [point1, point2, ....]``.\nIn general:\n\
        \n.. code-block:: python\n\n    motor1, [point1, point2, ...],\n    motor2,\
        \ [point1, point2, ...],\n    ...,\n    motorN, [point1, point2, ...]\n\n\
        Motors can be any 'settable' object (motor, temp controller, etc.)\npoint1,\
        \ point2 etc are relative to the current location."
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_log_scan:
    description: Scan over one variable in log-spaced steps relative to current position.
    module: bluesky.plans
    name: rel_log_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: starting position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: ending position of motor
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: int
      description: number of steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step)

        Expected signature: ``f(detectors, motor, step)``'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_outer_product_scan:
    description: Scan over a mesh relative to current position.
    module: bluesky.plans
    name: rel_grid_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Union[collections.abc.Iterable, bool, NoneType]
      default: None
      description: 'which axes should be snaked, either ``False`` (do not snake any
        axes),

        ``True`` (snake all axes) or a list of axes to snake. "Snaking" an axis

        is defined as following snake-like, winding trajectory instead of a

        simple left-to-right trajectory. The elements of the list are motors

        that are listed in `args`. The list must not contain the slowest

        (first) motor, since it can''t be snaked.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: snake_axes
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_scan:
    description: Scan over one multi-motor trajectory relative to current position.
    module: bluesky.plans
    name: rel_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "For one dimension, ``motor, start, stop``.\nIn general:\n\n..\
        \ code-block:: python\n\n    motor1, start1, stop1,\n    motor2, start2, start2,\n\
        \    ...,\n    motorN, startN, stopN,\n\nMotors can be any 'settable' object\
        \ (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - default: None
      description: number of points
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_spiral:
    description: Relative spiral scan
    module: bluesky.plans
    name: rel_spiral
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: Delta radius along the minor axis of the ellipse.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - annotation:
        type: float
      description: Number of theta steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nth
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'Delta radius along the major axis of the ellipse. If None, it

        defaults to dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - annotation:
        type: float
      default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  relative_spiral_fermat:
    description: Relative fermat spiral scan
    module: bluesky.plans
    name: rel_spiral_fermat
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - annotation:
        type: __MOVABLE__
      convert_device_names: true
      description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: delta radius
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - annotation:
        type: float
      description: radius gets divided by this
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: factor
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'Delta radius along the major axis of the ellipse, if not specifed

        defaults to dr'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - annotation:
        type: typing.Optional[float]
      default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  remove_suspender:
    description: Remove a suspender during a plan.
    module: bluesky.plan_stubs
    name: remove_suspender
    parameters:
    - description: The suspender to remove
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: suspender
    properties:
      is_generator: false
  repeat:
    description: Repeat a plan num times with delay and checkpoint between each repeat.
    module: bluesky.plan_stubs
    name: repeat
    parameters:
    - description: Callable that returns an iterable of Msg objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: plan
    - annotation:
        type: typing.Optional[int]
      default: '1'
      description: 'number of readings to take; default is 1


        If None, capture data until canceled'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - annotation:
        type: typing.Union[float, collections.abc.Iterable[float]]
      default: '0.0'
      description: time delay between successive readings; default is 0
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: delay
    properties:
      is_generator: false
  repeater:
    description: Generate n chained copies of the messages from gen_func
    module: bluesky.plan_stubs
    name: repeater
    parameters:
    - annotation:
        type: typing.Optional[int]
      description: total number of repetitions; if None, infinite
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n
    - description: returns generator instance
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: gen_func
    - kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  save:
    description: Close a bundle of readings and emit a completed Event document.
    module: bluesky.plan_stubs
    name: save
    parameters: []
    properties:
      is_generator: false
  scan:
    description: Scan over one multi-motor trajectory.
    module: bluesky.plans
    name: scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: typing.Union[__MOVABLE__, typing.Any]
      convert_device_names: true
      description: "For one dimension, ``motor, start, stop``.\nIn general:\n\n..\
        \ code-block:: python\n\n    motor1, start1, stop1,\n    motor2, start2, stop2,\n\
        \    ...,\n    motorN, startN, stopN\n\nMotors can be any 'settable' object\
        \ (motor, temp controller, etc.)"
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[int]
      default: None
      description: number of points
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: num
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  scan_nd:
    description: Scan over an arbitrary N-dimensional trajectory.
    module: bluesky.plans
    name: scan_nd
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: cycler.Cycler object mapping movable interfaces to positions
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: cycler
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  sleep:
    description: Tell the RunEngine to sleep, while asynchronously doing other processing.
    module: bluesky.plan_stubs
    name: sleep
    parameters:
    - annotation:
        type: float
      description: seconds
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: time
    properties:
      is_generator: false
  spiral:
    description: Spiral scan, centered around (x_start, y_start)
    module: bluesky.plans
    name: spiral
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_start
    - annotation:
        type: float
      description: y center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_start
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: Delta radius along the minor axis of the ellipse.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - annotation:
        type: float
      description: Number of theta steps
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: nth
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'Delta radius along the major axis of the ellipse. If None, defaults
        to

        dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - annotation:
        type: typing.Optional[float]
      default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  spiral_fermat:
    description: Absolute fermat spiral scan, centered around (x_start, y_start)
    module: bluesky.plans
    name: spiral_fermat
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_start
    - annotation:
        type: float
      description: y center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_start
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: delta radius
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: dr
    - annotation:
        type: float
      description: radius gets divided by this
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: factor
    - annotation:
        type: typing.Optional[float]
      default: None
      description: 'Delta radius along the major axis of the ellipse, if not specifed

        defaults to dr.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: dr_y
    - annotation:
        type: typing.Optional[float]
      default: '0.0'
      description: Tilt angle in radians, default 0.0
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: tilt
    - default: None
      description: 'hook for customizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  spiral_square:
    description: Absolute square spiral scan, centered around (x_center, y_center)
    module: bluesky.plans
    name: spiral_square
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_motor
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_motor
    - annotation:
        type: float
      description: x center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_center
    - annotation:
        type: float
      description: y center
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_center
    - annotation:
        type: float
      description: x width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_range
    - annotation:
        type: float
      description: y width of spiral
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_range
    - annotation:
        type: float
      description: number of x axis points
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: x_num
    - annotation:
        type: float
      description: Number of y axis points.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: y_num
    - default: None
      description: 'hook for cutomizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plans.one_nd_step` (the default) for

        details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  stage:
    description: '''Stage'' a device (i.e., prepare it for use, ''arm'' it).'
    module: bluesky.plan_stubs
    name: stage
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: typing.Optional[bool]
      default: None
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    properties:
      is_generator: false
  stage_all:
    description: '''Stage'' one or more devices (i.e., prepare them for use, ''arm''
      them).'
    module: bluesky.plan_stubs
    name: stage_all
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      description: device1, device2, device3, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    properties:
      is_generator: false
  stop:
    description: Stop a device.
    module: bluesky.plan_stubs
    name: stop
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: false
  subscribe:
    description: Subscribe the stream of emitted documents.
    module: bluesky.plan_stubs
    name: subscribe
    parameters:
    - annotation:
        type: str
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: name
    - annotation:
        type: __CALLABLE__
      description: 'Expected signature: ``f(name, doc)`` where ``name`` is one of
        the

        strings above (''all, ''start'', ...) and ``doc`` is a dict'
      eval_expressions: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: func
    properties:
      is_generator: false
  tomo_demo_01:
    module: __main__
    name: tomo_demo_01
    parameters:
    - default: '10'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: theta0
    - default: '161'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n_proj
    - default: '3'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: n_series
    properties:
      is_generator: true
  tomo_demo_async:
    module: __main__
    name: tomo_demo_async
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: panda
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detector
    - default: '21'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num_images
    - default: '9'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: scan_time
    - default: '0'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start_deg
    - default: None
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: exposure_time
    properties:
      is_generator: true
  trigger:
    description: Trigger and acquisition. Optionally, wait for it to complete.
    module: bluesky.plan_stubs
    name: trigger
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: bool
      default: 'False'
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    properties:
      is_generator: false
  trigger_and_read:
    description: Trigger and read a list of detectors and bundle readings into one
      Event.
    module: bluesky.plan_stubs
    name: trigger_and_read
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: devices to trigger (if they have a trigger method) and then read
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: devices
    - annotation:
        type: str
      default: '''primary'''
      description: 'event stream name, a convenient human-friendly identifier; default

        name is ''primary'''
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: name
    properties:
      is_generator: false
  tune_centroid:
    description: 'plan: tune a motor to the centroid of signal(motor)'
    module: bluesky.plans
    name: tune_centroid
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - annotation:
        type: str
      description: detector field whose output is to maximize
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: signal
    - description: any 'settable' object (motor, temp controller, etc.)
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: start of range
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: 'end of range, note: start < stop'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: float
      description: smallest step size to use.
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: min_step
    - annotation:
        type: int
      default: '10'
      description: number of points with each traversal, default = 10
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - annotation:
        type: float
      default: '3.0'
      description: 'used in calculating new range after each pass


        note: step_factor > 1.0, default = 3'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step_factor
    - annotation:
        type: bool
      default: 'False'
      description: if False (default), always scan from start to stop
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: snake
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  tweak:
    description: Move and motor and read a detector with an interactive prompt.
    module: bluesky.plans
    name: tweak
    parameters:
    - annotation:
        type: __READABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detector
    - annotation:
        type: str
      description: data field whose output is the focus of the adaptive tuning
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: target_field
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor
    - annotation:
        type: float
      description: initial suggestion for step size
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  unmonitor:
    description: Stop monitoring.
    module: bluesky.plan_stubs
    name: unmonitor
    parameters:
    - annotation:
        type: __READABLE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    properties:
      is_generator: false
  unstage:
    description: '''Unstage'' a device (i.e., put it in standby, ''disarm'' it).'
    module: bluesky.plan_stubs
    name: unstage
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: obj
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    - annotation:
        type: typing.Optional[bool]
      default: None
      description: 'If True, wait for completion before processing any more messages.

        False by default.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: wait
    properties:
      is_generator: false
  unstage_all:
    description: '''Unstage'' one or more devices (i.e., put them in standby, ''disarm''
      them).'
    module: bluesky.plan_stubs
    name: unstage_all
    parameters:
    - annotation:
        type: __DEVICE__
      convert_device_names: true
      description: device1, device2, device3, ...
      kind:
        name: VAR_POSITIONAL
        value: 2
      name: args
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: identifier used by 'wait'; None by default
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: group
    properties:
      is_generator: false
  unsubscribe:
    description: Remove a subscription.
    module: bluesky.plan_stubs
    name: unsubscribe
    parameters:
    - annotation:
        type: int
      description: token returned by processing a 'subscribe' message
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: token
    properties:
      is_generator: false
  wait:
    description: Wait for all statuses in a group to report being finished.
    module: bluesky.plan_stubs
    name: wait
    parameters:
    - annotation:
        type: typing.Optional[collections.abc.Hashable]
      default: None
      description: Identifier given to `abs_set`, `rel_set`, `trigger`; None by default
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: group
    - annotation:
        type: typing.Optional[float]
      default: None
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: timeout
    - annotation:
        type: bool
      default: 'False'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: move_on
    properties:
      is_generator: false
  wait_for:
    description: 'Low-level: wait for a list of ``asyncio.Future`` objects to set
      (complete).'
    module: bluesky.plan_stubs
    name: wait_for
    parameters:
    - annotation:
        type: collections.abc.Iterable[__CALLABLE__]
      description: iterable collection of coroutine functions that take no arguments
      eval_expressions: true
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: futures
    - description: passed through to ``asyncio.wait()``
      kind:
        name: VAR_KEYWORD
        value: 4
      name: kwargs
    properties:
      is_generator: false
  x2x_scan:
    description: Relatively scan over two motors in a 2:1 ratio
    module: bluesky.plans
    name: x2x_scan
    parameters:
    - annotation:
        type: collections.abc.Sequence[__READABLE__]
      convert_device_names: true
      description: list of 'readable' objects
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detectors
    - description: The second motor will move half as much as the first
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor1
    - description: The second motor will move half as much as the first
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: motor2
    - annotation:
        type: float
      description: 'The relative limits of the first motor.  The second motor

        will move between ``start / 2`` and ``stop / 2``'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start
    - annotation:
        type: float
      description: 'The relative limits of the first motor.  The second motor

        will move between ``start / 2`` and ``stop / 2``'
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: stop
    - annotation:
        type: int
      description: number of steps in the scan
      kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: num
    - default: None
      description: 'hook for cutomizing action of inner loop (messages per step).

        See docstring of :func:`bluesky.plan_stubs.one_nd_step` (the default)

        for details.'
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: per_step
    - annotation:
        type: typing.Optional[dict[str, typing.Any]]
      default: None
      description: metadata
      kind:
        name: KEYWORD_ONLY
        value: 3
      name: md
    properties:
      is_generator: true
  xas_demo_async:
    module: __main__
    name: xas_demo_async
    parameters:
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: panda
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: detector
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: npoints
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: total_time
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: start_e
    - kind:
        name: POSITIONAL_OR_KEYWORD
        value: 1
      name: end_e
    properties:
      is_generator: true
